//神经元PID
float k = 8.0;           //神经元输出比例，首先调节项，全局的重要的 kcoef
float p = 5.0;           //比例学习速度，可调节项，越大超调量越小，响应越慢
float i = 40.0;          //积分学习速度，可调节项，越大响应越快，超调量越大
float d = 3.0;           //微分学习速度，越大上升和下降响应越慢
int16_t ek0 = 0;         //本次误差
int16_t lasterror = 0;   //前一拍偏差
int16_t preerror = 0;    //前两拍偏差
const int8_t deadband = 0;    //死区
int16_t pid_out = 0;           //输出值
const int16_t maximum = 2047;  //输出值的上限，因为使用的是自定义pwm，所以不是255，而是2047
const int16_t minimum = 0;    //输出值的下限，pwm最小值0
double wp = 1000.0;      //比例加权系数，由神经元自动计算
double wi = 1000.0;      //积分加权系数，由神经元自动计算
double wd = 1000.0;      //微分加权系数，由神经元自动计算
void NeuralPID() //神经元计算
{
  double x[3];
  double w[3];
  double sabs;
  int16_t deltaResult; //临时

  if (abs(ek0) > deadband) //死区
  {
    x[0] = ek0;
    x[1] = ek0 - lasterror;
    x[2] = ek0 - lasterror * 2 + preerror;
    sabs = fabs(wi) + fabs(wp) + fabs(wd);
    w[0] = wi / sabs;
    w[1] = wp / sabs;
    w[2] = wd / sabs;
    deltaResult = (w[0] * x[0] + w[1] * x[1] + w[2] * x[2]) * k;
  }
  else
  {
    deltaResult = 0;
  }
  pid_out = pid_out + deltaResult;
  if (pid_out > maximum)
  {
    pid_out = maximum;
  }
  else if (pid_out < minimum)
  {
    pid_out = minimum;
  }

  NeureLearningRules(ek0, pid_out, x);//单神经元学习

  preerror = lasterror;
  lasterror = ek0;
}
void NeureLearningRules(double zk, double uk, double * xi) //单神经元有监督Hebb学习规则
{
  wi = wi + i * zk * uk * xi[0];
  wp = wp + p * zk * uk * xi[1];
  wd = wd + d * zk * uk * xi[2];
}



//增量式神经元PID
void t12_pid()
{
  if (set_temp >= 40 && t12_switch == 1) //设置温度大于40度&&总开关开启
  {
    ek0 = set_temp - t12_temp;  //计算现在的差值
    int16_t ek_average = set_temp - t12_temp_average; //计算设定值与平均温度的差值
    if (ek_average >= -3 && ek_average <= 3 && buzzer3_state == 0) //平均差值小于3，发出声音提示一下
    {
      buzzer(10);
      delay(100);
      buzzer(10);
      buzzer3_state = 1;
    }
    if (ek0 > 20)  //差值大于20度
    {
      t12_temp_read_time = 800; //延长采样时间
    }
    else if (ek0 <= 20 && ek0 > 10) //差值10-20度内
    {
      t12_temp_read_time = 200;  //缩短采样时间
    }
    else if (ek0 <= 10 && ek0 > 0) t12_temp_read_time = 150; //缩短采样时间
    else if (ek0 <= 0) t12_temp_read_time = 50; //误差为负数，再次缩短采样时间

    NeuralPID();  //神经元PID计算
  }
  else pid_out = 0;
  pwm1(pid_out);   //使用相位和频率校正模式，61HZ，滴滴声大幅下降
}



/*
  时钟输出 | Arduino输出Pin | 芯片Pin | Pin 名字
  OC0A       6                12       PD6
  OC0B       5                11       PD5
  OC1A       9                15       PB1
  OC1B       10               16       PB2
  OC2A       11               17       PB3
  OC2B       3                5        PD3

  脉冲生成模式控制位（WGM）：用来设置PWM的模式或CTC模式
  时钟选择位（CS）：设置时钟的预分频
  输出模式控制位（COMnA和COMnB）：使能/禁用/反相 输出A和输出B
  输出比较器（OCRnA和OCRnB）：当计数器等于这两个值时，输出值根据不同的模式进行变化

  快速PWM（0-255 0-255 数完归零）
  相位修正PWM（0-255 255-0 数完倒数）

  8位(定时器0/2)
  CSn0 001 = 1
  CSn1 010 = 8
  CSn2 011= 32
  CSn3 100= 64
  CSn4 101= 128
  CSn5 110= 256
  CSn6 111= 1024
  16位(定时器1)
  CSn0 001 = 1
  CSn1 010 = 8
  CSn2 011= 64
  CSn3 100= 256
  CSn4 101= 1024

  COMnA1 COMnB1 =  占空比AB都可控
  从0数到2047 0时输出高电平
  OCRnA 当数到OCRnA，输出低电平，即A的占空比=OCRnA的值
  OCRnB 当数到OCRnB，输出低电平，即B的占空比=OCRnB的值

  COMnA0 COMnB1 =  A当数到头是反相 占空比A50% B可控
  OCRnA 从0数到OCRnA 0时输出高电平
  OCRnB 当OCRnA=OCRnB，输出低电平
*/
void pwm1(uint16_t val)//自定义PWM，使用相位和频率校正模式，2048级控温
{
  //输出通道B 占空比: (OCR1B+1) / (OCR1A+1)
  //占空比不能大于OCR1A
  //pinMode(10, OUTPUT); //pin10连接至B通道
  if (val == 2047) digitalWrite(t12_pwm_pin, 1);
  else if (val == 0) digitalWrite(t12_pwm_pin, 0);
  else {
    //bitWrite(DDRB, 2, 1);  //设置pin10为输出
    //相位和频率校正PWM,分频比64，频率: 16000000/2*64*(OCR1A+1) = 61HZ
    TCCR1A = B00100001;
    TCCR1B = B00010011;
    OCR1A = 2047;  //从0开始数到0CR1A，0-65535，设置周期和频率
    OCR1B = val;   //用来设置比较器,占空比
  }
}

